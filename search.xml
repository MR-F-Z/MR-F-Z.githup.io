<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql基础</title>
      <link href="posts/8e40d0ad.html"/>
      <url>posts/8e40d0ad.html</url>
      
        <content type="html"><![CDATA[<h3 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h3><h4 id="1-什么是SQL？"><a href="#1-什么是SQL？" class="headerlink" title="1.什么是SQL？"></a>1.什么是SQL？</h4><p>&emsp;&emsp;Structured Query Language：结构化查询语言<br>&emsp;&emsp;其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。    </p><h4 id="2-SQL通用语法"><a href="#2-SQL通用语法" class="headerlink" title="2.SQL通用语法"></a>2.SQL通用语法</h4><ol><li>SQL 语句可以单行或多行书写，以分号结尾。</li><li>可使用空格和缩进来增强语句的可读性。</li><li>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</li><li>3 种注释<br>单行注释: – 注释内容 或 # 注释内容(mysql 特有)<br>多行注释: /* 注释 */</li></ol><h4 id="3-SQL分类"><a href="#3-SQL分类" class="headerlink" title="3. SQL分类"></a>3. SQL分类</h4><ol><li>DDL(Data Definition Language)数据定义语言<br>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</li><li>DML(Data Manipulation Language)数据操作语言<br>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</li><li>DQL(Data Query Language)数据查询语言<br>用来查询数据库中表的记录(数据)。关键字：select, where 等</li><li>DCL(Data Control Language)数据控制语言(了解)<br>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</li></ol><hr><h3 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h3><h4 id="1-操作数据库：CRUD"><a href="#1-操作数据库：CRUD" class="headerlink" title="1. 操作数据库：CRUD"></a>1. 操作数据库：CRUD</h4><h5 id="C-Create-创建"><a href="#C-Create-创建" class="headerlink" title="C(Create):创建"></a>C(Create):创建</h5><pre><code>    * 创建数据库：        * create database 数据库名称;    * 创建数据库，判断不存在，再创建：        * create database if not exists 数据库名称;    * 创建数据库，并指定字符集        * create database 数据库名称 character set 字符集名;    * 例如 create database if not exists db4 character set gbk;</code></pre><h5 id="R-Retrieve-：查询"><a href="#R-Retrieve-：查询" class="headerlink" title="R(Retrieve)：查询"></a>R(Retrieve)：查询</h5><pre><code>    * 查询所有数据库的名称:        * show databases;    * 查询某个数据库的字符集:查询某个数据库的详细创建信息        * show create database 数据库名称;        </code></pre><h5 id="U-Update-修改"><a href="#U-Update-修改" class="headerlink" title="U(Update):修改"></a>U(Update):修改</h5><pre><code>    * 修改数据库的字符集        * alter database 数据库名称 character set 字符集名称;</code></pre><h5 id="D-Delete-删除"><a href="#D-Delete-删除" class="headerlink" title="D(Delete):删除"></a>D(Delete):删除</h5><pre><code>    * 删除数据库        * drop database 数据库名称;    * 判断数据库存在，存在再删除        * drop database if exists 数据库名称;</code></pre><h5 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h5><pre><code>    * 查询当前正在使用的数据库名称        * select database();    * 使用数据库        * use 数据库名称;</code></pre><hr><h4 id="2-操作表"><a href="#2-操作表" class="headerlink" title="2. 操作表"></a>2. 操作表</h4><h5 id="C-Create-创建表"><a href="#C-Create-创建表" class="headerlink" title="C(Create):创建表"></a>C(Create):创建表</h5><pre><code>    1. 语法：        create table 表名(            列名1 数据类型1,            列名2 数据类型2,            ....            列名n 数据类型n        );        * 注意：最后一列，不需要加逗号（,）        * 数据库类型：            1. int：整数类型                * age int,            2. double:小数类型                * score double(5,2)            3. date:日期，只包含年月日，yyyy-MM-dd            4. datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss            5. timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss                    * 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值            6. varchar：字符串                * name varchar(20):姓名最大20个字符                * zhangsan 8个字符  张三 2个字符     2. 创建一个学生表        create table student(            id int,            name varchar(32),            age int ,            score double(4,1),            birthday date,            insert_time timestamp        );     3. 复制表：        * create table 表名 like 被复制的表名;    </code></pre><h5 id="R-Retrieve-：查询表"><a href="#R-Retrieve-：查询表" class="headerlink" title="R(Retrieve)：查询表"></a>R(Retrieve)：查询表</h5><pre><code>    * 查询某个数据库中所有的表名称        * show tables;    * 查询表结构        * desc 表名;</code></pre><h5 id="U-Update-修改表"><a href="#U-Update-修改表" class="headerlink" title="U(Update):修改表"></a>U(Update):修改表</h5><pre><code>    1. 修改表名        alter table 表名 rename to 新的表名;    2. 修改表的字符集        alter table 表名 character set 字符集名称;    3. 添加一列        alter table 表名 add 列名 数据类型;    4. 修改列名称 类型        alter table 表名 change 列名 新列别 新数据类型;        alter table 表名 modify 列名 新数据类型;    5. 删除列        alter table 表名 drop 列名;</code></pre><h5 id="D-Delete-删除-1"><a href="#D-Delete-删除-1" class="headerlink" title="D(Delete):删除"></a>D(Delete):删除</h5><pre><code>    * drop table 表名;    * drop table  if exists 表名 ;</code></pre><hr><h3 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h3><h4 id="1-添加数据："><a href="#1-添加数据：" class="headerlink" title="1. 添加数据："></a>1. 添加数据：</h4><pre><code>* 语法：    * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);* 注意：    1. 列名和值要一一对应。    2. 如果表名后，不定义列名，则默认给所有列添加值        insert into 表名 values(值1,值2,...值n);    3. 除了数字类型，其他类型需要使用引号(单引双引都可以)引起来</code></pre><h4 id="2-删除数据："><a href="#2-删除数据：" class="headerlink" title="2. 删除数据："></a>2. 删除数据：</h4><pre><code>* 语法：    * delete from 表名 [where 条件]* 注意：    1. 如果不加条件，则删除表中所有记录。    2. 如果要删除所有记录        1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作        2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</code></pre><h4 id="3-修改数据："><a href="#3-修改数据：" class="headerlink" title="3. 修改数据："></a>3. 修改数据：</h4><pre><code>* 语法：    * update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];* 注意：    1. 如果不加任何条件，则会将表中所有记录全部修改。</code></pre><hr><h3 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h3><h4 id="1-语法："><a href="#1-语法：" class="headerlink" title="1. 语法："></a>1. 语法：</h4><pre><code>select    字段列表from    表名列表where    条件列表group by    分组字段having    分组之后的条件order by    排序limit    分页限定</code></pre><p>select * from 表名;查询表中所有数据</p><h4 id="2-基础查询"><a href="#2-基础查询" class="headerlink" title="2. 基础查询"></a>2. 基础查询</h4><pre><code>1. 多个字段的查询    select 字段名1，字段名2... from 表名；    * 注意：        * 如果查询所有字段，则可以使用*来替代字段列表。2. 去除重复：    * distinct3. 计算列    * 一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）    * null参与的运算，计算结果都为null    * ifnull(表达式1,表达式2)：        * 表达式1：哪个字段需要判断是否为null        * 如果该字段为null后的替换值。4. 起别名：    * as：as也可以省略</code></pre><h4 id="3-条件查询"><a href="#3-条件查询" class="headerlink" title="3. 条件查询"></a>3. 条件查询</h4><pre><code>1. where子句后跟条件2. 运算符    * &gt; 、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;    * BETWEEN...AND      * IN( 集合)     * LIKE：模糊查询        * 占位符：            * _:单个任意字符            * %：多个任意字符    * IS NULL      * and  或 &amp;&amp;    * or  或 ||     * not  或 !3.例子        -- 查询年龄大于20岁        SELECT * FROM student WHERE age &gt; 20;        SELECT * FROM student WHERE age &gt;= 20;        -- 查询年龄等于20岁        SELECT * FROM student WHERE age = 20;        -- 查询年龄不等于20岁        SELECT * FROM student WHERE age != 20;        SELECT * FROM student WHERE age &lt;&gt; 20;        -- 查询年龄大于等于20 小于等于30        SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;        SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;        SELECT * FROM student WHERE age BETWEEN 20 AND 30;        -- 查询年龄22岁，18岁，25岁的信息        SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25        SELECT * FROM student WHERE age IN (22,18,25);        -- 查询英语成绩为null        SELECT * FROM student WHERE english = NULL; -- 不对的。null值不能使用 = （!=） 判断        SELECT * FROM student WHERE english IS NULL;        -- 查询英语成绩不为null        SELECT * FROM student WHERE english  IS NOT NULL;</code></pre><p>以上是来自黑马课程的笔记</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo怎么写博客</title>
      <link href="posts/a6b3d09b.html"/>
      <url>posts/a6b3d09b.html</url>
      
        <content type="html"><![CDATA[<h3 id="首先新建文章"><a href="#首先新建文章" class="headerlink" title="首先新建文章"></a>首先新建文章</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"文章标题"</span></code></pre><p>在网站根目录的 source/_posts目录下存放着博客文档，以.md文档格式存储。</p><h3 id="关于Markdown的基本语法"><a href="#关于Markdown的基本语法" class="headerlink" title="关于Markdown的基本语法"></a>关于Markdown的基本语法</h3><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h4><p>一个#号加空格表示一级标题，俩个#号加空格表示二级标题…依此类推，最多6级，如：</p><pre><code>## 标题### 标题</code></pre><p><img src="https://myblog-1303177382.cos.ap-chongqing.myqcloud.com/blogpostimg/%24RGTQS1O.png" alt="示例" title="e"></p><hr><h4 id="2-超链接-引用"><a href="#2-超链接-引用" class="headerlink" title="2.超链接 引用"></a>2.超链接 引用</h4><pre><code>[百度](http://www.baidu.com)</code></pre><p><a href="http://www.baidu.com/">百度</a></p><pre><code>&gt;这是一条引用</code></pre><blockquote><p>这是一条引用</p></blockquote><hr><h4 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3.代码块"></a>3.代码块</h4><p>分别用3个连续的符号```包裹代码，开头三个```末尾可写入指定的编程语言，如```c</p><pre><code>` ` `cinclude &lt;stdio.h&gt;int main(void)&#123;printf(&quot;Hello world\n&quot;);&#125;` ` `</code></pre><pre class=" language-c"><code class="language-c">include <span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>还有行内式,如</p><pre><code>js控制台输出代码`console.log()`</code></pre><p>js控制台输出代码<code>console.log()</code></p><h4 id="4-转义"><a href="#4-转义" class="headerlink" title="4.转义"></a>4.转义</h4><p>Markdown中的转义字符为\，如</p><pre><code>\\ \* \` </code></pre><p>\ * `</p><hr><h4 id="5-缩进、换行、空行、对齐方式"><a href="#5-缩进、换行、空行、对齐方式" class="headerlink" title="5.缩进、换行、空行、对齐方式"></a>5.缩进、换行、空行、对齐方式</h4><h6 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h6><pre><code>【1】 &amp;emsp;或&amp;#8195; //全角【2】 &amp;ensp;或&amp;#8194; //半角【3】 &amp;nbsp;或&amp;#160;  //半角之半角</code></pre><p> 【1】&emsp;全角<br> 【2】&ensp;半角<br> 【3】&nbsp;半角之半角</p><h6 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h6><p>由于markdown编辑器的不同,可能在一行字后面，直接换行回车，也能实现换行，但是在Visual Studio Code上，想要换行必须得在一行字后面空两个格子才行。</p><h6 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h6><p>在编辑的时候有多少个空行(只要这一行只有回车或者space没有其他的字符就算空行)，在渲染之后，只隔着一行。<br>也可以直接使用 html 标签，即 &lt;br/&gt; 。Markdown 支持直接使用 html</p><h6 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h6><pre><code>&lt;center&gt;行中心对齐&lt;/center&gt;&lt;p align=&quot;left&quot;&gt;行左对齐&lt;/p&gt;&lt;p align=&quot;right&quot;&gt;行右对齐&lt;/p&gt;</code></pre><center>行中心对齐</center><p align="left">行左对齐</p><p align="right">行右对齐</p><hr><h4 id="6-斜体、粗体、删除线、下划线"><a href="#6-斜体、粗体、删除线、下划线" class="headerlink" title="6.斜体、粗体、删除线、下划线"></a>6.斜体、粗体、删除线、下划线</h4><pre><code>*斜体*或_斜体_**粗体*****加粗斜体***~~删除线~~&lt;u&gt;下划线&lt;/u&gt;</code></pre><p><em>斜体</em>或<em>斜体</em> <strong>粗体</strong> <strong><em>加粗斜体</em></strong> <del>删除线</del><br><u>下划线</u></p><hr><h4 id="7-插入图片"><a href="#7-插入图片" class="headerlink" title="7.插入图片"></a>7.插入图片</h4><pre><code>&lt;center&gt;  &lt;!--开始居中对齐--&gt;![图片Alt](图片地址 &quot;图片Title&quot;)&lt;/center&gt; &lt;!--结束居中对齐--&gt;也可以直接使用html&lt;img src=&quot;图片地址&quot;&gt; &lt;/img&gt;</code></pre><h4 id="8-无序列表、有序列表"><a href="#8-无序列表、有序列表" class="headerlink" title="8.无序列表、有序列表"></a>8.无序列表、有序列表</h4><h6 id="均表示无序列表"><a href="#均表示无序列表" class="headerlink" title="* + -均表示无序列表]"></a>* + -均表示无序列表]</h6><pre><code>* 无序列表项+ 无序列表项- 无序列表项</code></pre><ul><li>无序列表项</li></ul><ul><li>无序列表项</li></ul><ul><li>无序列表项</li></ul><h6 id="有序列表则使用数字接着一个英文句点"><a href="#有序列表则使用数字接着一个英文句点" class="headerlink" title="有序列表则使用数字接着一个英文句点"></a>有序列表则使用数字接着一个英文句点</h6><pre><code>1. 有序列表项2. 有序列表项3. 有序列表项</code></pre><ol><li>有序列表项</li><li>有序列表项</li><li>有序列表项</li></ol><hr><h5 id="9-分隔线"><a href="#9-分隔线" class="headerlink" title="9.分隔线"></a>9.分隔线</h5><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><h3 id="关于mardown的编辑器"><a href="#关于mardown的编辑器" class="headerlink" title="关于mardown的编辑器"></a>关于mardown的编辑器</h3><p>&emsp;可参考文章<a href="https://blog.csdn.net/davidhzq/article/details/100815332">https://blog.csdn.net/davidhzq/article/details/100815332</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
